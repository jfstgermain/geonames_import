// Generated by CoffeeScript 1.3.2
(function() {
  var csv, mongodb,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  csv = require("ya-csv");

  mongodb = require("mongodb");

  mongodb.connect("mongodb://meatme:j845680s@alex.mongohq.com:10020/meatme", function(err, db) {
    var interesting_country_codes, interesting_feature_codes;
    if (err != null) {
      throw err;
    } else {
      interesting_feature_codes = ["PPL", "PPLA", "PPLA2", "PPLC", "PPLL", "PPLS", "ADMD", "ZN"];
      interesting_country_codes = ["CA", "US"];
      return db.collection("states", function(err, states) {
        var reader;
        reader = csv.createCsvFileReader("./data/admin1CodesASCII.csv", {
          separator: "\t"
        });
        console.log("Starting states import");
        reader.addListener("data", function(data) {
          var doc, geonameid, state_code, state_code_prefix, state_code_suffix, state_name1, state_name2, _ref;
          state_code = data[0], state_name1 = data[1], state_name2 = data[2], geonameid = data[3];
          _ref = state_code.split("."), state_code_prefix = _ref[0], state_code_suffix = _ref[1];
          if (__indexOf.call(interesting_country_codes, state_code_prefix) >= 0) {
            doc = {
              geonameid: geonameid,
              name1: state_name1,
              name2: state_name2,
              stateCode: state_code
            };
            return states.insert(doc);
          }
        });
        return reader.addListener("end", function() {
          console.log("Finished processing states CSV file");
          return db.collection("geoAreas", function(err1, geoAreas) {
            return geoAreas.ensureIndex({
              geoloc: "2d"
            }, function(err, indexName) {
              reader = csv.createCsvFileReader("./data/CA.csv", {
                separator: "\t"
              });
              reader.addListener("end", function() {
                return console.log("Finished importing data...");
              });
              return reader.addListener("data", function(data) {
                var admin1_code, admin1_code_full, admin2_code, admin3_code, admin4_code, alternatenames, asciiname, cc2, counter, country_code, elevation, feature_class, feature_code, geonameid, gtopo30, latitude, longitude, modification_date, name, population, timezone;
                counter = 0;
                geonameid = data[0], name = data[1], asciiname = data[2], alternatenames = data[3], latitude = data[4], longitude = data[5], feature_class = data[6], feature_code = data[7], country_code = data[8], cc2 = data[9], admin1_code = data[10], admin2_code = data[11], admin3_code = data[12], admin4_code = data[13], population = data[14], elevation = data[15], gtopo30 = data[16], timezone = data[17], modification_date = data[18];
                if (__indexOf.call(interesting_feature_codes, feature_code) >= 0 && __indexOf.call(name, "(historical)") < 0) {
                  /*
                                  statename = (not admin1_code.nil? and not states[admin1_code].nil?) ? states[admin1_code].downcase : nil
                                  alternatnames.gsub!(/\./,"")
                                  keywords = [name.downcase.split(" "),alternatenames.downcase.split(",").split(" "),admin1_code.downcase,admin2_code.downcase,admin3_code.downcase,admin4_code.downcase,statename].flatten.compact
                                  keywords.delete_if {|x| x == ""}
                                  keywords = keywords.flatten.uniq.sort
                  */

                  admin1_code_full = "" + country_code + "." + admin1_code;
                  return states.find({
                    stateCode: admin1_code_full
                  }, function(err2, cursor) {
                    return cursor.nextObject(function(err3, admin1_code_doc) {
                      var admin1_code_dbref, doc;
                      admin1_code_dbref = null;
                      if (!(err != null) && (admin1_code_doc != null)) {
                        admin1_code_dbref = new db.bson_serializer.ObjectID("" + admin1_code_doc._id);
                      } else {
                        console.log("Couldn't find " + admin1_code_full + " in States");
                        console.log("******** name " + name);
                        console.log("******** timezone " + timezone);
                        console.log("******** admin2_code " + admin2_code);
                        console.log("******** admin3_code " + admin3_code);
                      }
                      doc = {
                        geonameid: geonameid,
                        name: name,
                        countryCode: country_code,
                        featureClass: feature_class,
                        featureCode: feature_code,
                        admin1Code: admin1_code,
                        admin2Code: admin2_code,
                        timezone: timezone,
                        state: admin1_code_dbref,
                        population: Number(population),
                        geoloc: [Number(longitude), Number(latitude)]
                      };
                      return geoAreas.insert(doc);
                    });
                  });
                }
              });
            });
          });
        });
      });
    }
  });

}).call(this);
